# Openpose
# Openpose
import pandas as pd
import numpy as np
import random
from torch.utils.data import Dataset
import numpy as np


def multi_input(data, conn):
    C, T, V, M = data.shape
    data_new = np.zeros((3, C * 2, T, V, M))
    data_new[0, :C, :, :, :] = data
    for i in range(V):
        data_new[0, C:, :, i, :] = data[:, :, i, :] - data[:, :, 1, :]
    for i in range(T - 2):
        data_new[1, :C, i, :, :] = data[:, i + 1, :, :] - data[:, i, :, :]
        data_new[1, C:, i, :, :] = data[:, i + 2, :, :] - data[:, i, :, :]
    for i in range(len(conn)):
        data_new[2, :C, :, i, :] = data[:, :, i, :] - data[:, :, conn[i], :]
    bone_length = 0
    for i in range(C):
        bone_length += np.power(data_new[2, i, :, :, :], 2)
    bone_length = np.sqrt(bone_length) + 0.0001
    for i in range(C):
        data_new[2, C + i, :, :, :] = np.arccos(data_new[2, i, :, :, :] / bone_length)
    return data_new


class ADC_Feeder(Dataset):
    def __init__(self, phase, data_shape, connect_joint, **kwargs):
        _, _, self.T, self.V, self.M = data_shape
        self.conn = connect_joint
        self.phase = phase
        dts = pd.read_csv('/content/Project/dts_openpose.csv')
        dt = np.array(dts)

        dts_1 = pd.read_csv('/content/Project/dts_test_openpose_2.csv')
        dt_1 = np.array(dts_1)

        self.sample_name = [dt[0:690], dt[690:1230], dt[1230:1740], dt[1740:2460], dt[2460:2970], dt[2970:3630],
                            dt[3630:4080], dt[4080:4800], dt[4800:5520], dt[5520:6180], dt[6180:6690], dt[6690:7230],
                            dt[7230:7710], dt[7710:8370], dt[8370:8910], dt[8910:9450], dt[9450:10110], dt[10110:10560],
                            dt[10560:11250], dt[11250:11790], dt[11790:12300], dt[12300:13020], dt[13020:13530],
                            dt[13530:14190], dt[14190:14640], dt[14640:15360], dt[15360:16080], dt[16080:16740],
                            dt[16740:17280], dt[17280:17820], dt[17820:18300], dt[18300:18960], dt[18960:19500],
                            dt[19500:20040], dt[20040:20700], dt[20700:21150],
                            dt[21150:21840], dt[21840:22380], dt[22380:22920], dt[22920:23460], dt[23460:24000],
                            dt[24000:24720], dt[24720:25410], dt[25410:26010], dt[26010:26520], dt[26520:27030],
                            dt[27030:27690], dt[27690:28320], dt[28320:29010], dt[29010:29490], dt[29490:30240],
                            dt[30240:30810], dt[30810:31470], dt[31470:31980],
                            dt[31980:32670], dt[32670:33180], dt[33180:33690], dt[33690:34230], dt[34230:34740],
                            dt[34740:35460], dt[35460:36180], dt[36180:36810], dt[36810:37290], dt[37290:37800],
                            dt[37800:38460], dt[38460:39120], dt[39120:39750], dt[39750:40260], dt[40260:40980],
                            dt[40980:41550], dt[41550:42210], dt[42210:42780],
                            dt[42780:43650], dt[43650:44310], dt[44310:45000], dt[45000:45600], dt[45600:46320],
                            dt[46320:47010], dt[47010:47700], dt[47700:48240], dt[48240:48990], dt[48990:49620],
                            dt[49620:50190], dt[50190:50730], dt[50730:51450], dt[51450:52200], dt[52200:52830],
                            dt[52830:53400], dt[53400:53910], dt[53910:54421],
                            dt[54421:54961], dt[54961:55621], dt[55621:56311], dt[56311:56911], dt[56911:57631],
                            dt[57631:58351], dt[58351:59101], dt[59101:59641], dt[59641:60391], dt[60391:61051],
                            dt[61051:61561], dt[61561:62701], dt[62701:63421], dt[63421:64171], dt[64171:64801],
                            dt[64801:65371], dt[65371:65881], dt[65881:66571],
                            dt[66571:67081], dt[67081:67681], dt[67681:68161], dt[68161:68821], dt[68821:69481],
                            dt[69481:70201], dt[70201:70681], dt[70681:71131], dt[71131:71581], dt[71581:72271],
                            dt[72271:72751], dt[72751:73261], dt[73261:73981], dt[73981:74701], dt[74701:75181],
                            dt[75181:75691], dt[75691:76141], dt[76141:76801],
                            dt[76801:77371], dt[77371:77971], dt[77971:78481], dt[78481:79141], dt[79141:79801],
                            dt[79801:80521], dt[80521:81001], dt[81001:81451], dt[81451:81901], dt[81901:82561],
                            dt[82561:83071], dt[83071:83581], dt[83581:84301], dt[84301:85021], dt[85021:85501],
                            dt[85501:86011], dt[86011:86461], dt[86461:87121],
                            dt[87121:87631], dt[87631:88171], dt[88171:88681], dt[88681:89371], dt[89371:89971],
                            dt[89971:90781], dt[90781:91261], dt[91261:91381], dt[91381:91891], dt[91891:92521],
                            dt[92521:92971], dt[92971:93451], dt[93451:94081], dt[94081:94591], dt[94591:95071],
                            dt[95071:95971], dt[95971:96601], dt[96601:97231],
                            dt[97231:97681], dt[97681:98221], dt[98221:98701], dt[98701:99391], dt[99391:99811],
                            dt[99811:100501], dt[100501:100951], dt[100951:101551], dt[101551:102061],
                            dt[102061:102661], dt[102661:103081], dt[103081:103621], dt[103621:104221],
                            dt[104221:104671], dt[104671:105151], dt[105151:105751], dt[105751:106351]]
        self.data_test = [dt[106351:107131], dt[107131:107581], dt[107581:108181], dt[108181:108901], dt[108901:109561],
                          dt[109561:110521], dt[110521:111151], dt[111151:111661], dt[111661:112351], dt[112351:112951],
                          dt[112951:113521], dt[113521:114121], dt[114121:114751], dt[114751:115321], dt[115321:115771],
                          dt[115771:116431], dt[116431:116941], dt[116941:117541],
                          dt[117541:118231], dt[118231:118651], dt[118651:119191], dt[119191:119941], dt[119941:120751],
                          dt[120751:121501], dt[121501:122101], dt[122101:122641], dt[122641:123361], dt[123361:123961],
                          dt[123961:124501], dt[124501:125101], dt[125101:125671], dt[125671:126271], dt[126271:126721],
                          dt[126721:127411], dt[127411:127981], dt[127981:128551],
                          dt[128551:129031], dt[129031:129781], dt[129781:130501], dt[130501:130861], dt[130861:131611],
                          dt[131611:132121], dt[132121:132841], dt[132841:133321], dt[133321:133831], dt[133831:134401],
                          dt[134401:135121], dt[135121:136111], dt[136111:137011], dt[137011:137581], dt[137581:138001],
                          dt[138001:138901], dt[138901:139801], dt[139801:140611],
                          dt[140611:141211], dt[141211:141781], dt[141781:142470], dt[142470:142890], dt[142890:143640],
                          dt[143640:144150], dt[144150:144840], dt[144840:145470], dt[145470:146040], dt[146040:146580],
                          dt[146580:147180], dt[147180:148170], dt[148170:149070], dt[149070:149610], dt[149610:149910],
                          dt[149910:150990], dt[150990:151830], dt[151830:]]

        self.data_test_1 = [dt_1[0:600], dt_1[600:1710], dt_1[1710:1830], dt_1[1830:2790], dt_1[2790:2970],
                            dt_1[2970:3840], dt_1[3840:3960], dt_1[3960:4800], dt_1[4800:5730], dt_1[5730:6540],
                            dt_1[6540:7020], dt_1[7020:7620], dt_1[7620:7740], dt_1[7740:8490], dt_1[8490:9210],
                            dt_1[9210:9780], dt_1[9780:10140],
                            dt_1[10140:10950], dt_1[10950:11220], dt_1[11220:12150], dt_1[12150:12270],
                            dt_1[12270:13140], dt_1[13140:13260], dt_1[13260:14190], dt_1[14190:14340],
                            dt_1[14340:14700], dt_1[14700:14820], dt_1[14820:15270], dt_1[15270:15510],
                            dt_1[15510:15900], dt_1[15900:15990], dt_1[15990:16440], dt_1[16440:17310],
                            dt_1[17310:17550], dt_1[17550:17790],
                            dt_1[17790:18510], dt_1[18510:19140], dt_1[19140:19800], dt_1[19800:20520],
                            dt_1[20520:20970], dt_1[20970:21630], dt_1[21630:22350], dt_1[22350:23160],
                            dt_1[23160:23760], dt_1[23760:24780], dt_1[24780:25170], dt_1[25170:25500],
                            dt_1[25500:26100], dt_1[26100:26550], dt_1[26550:27120], dt_1[27120:27540],
                            dt_1[27540:27840], dt_1[27840:28560],
                            dt_1[28560:29190], dt_1[29190:29760], dt_1[29760:30450], dt_1[30450:31200],
                            dt_1[31200:31650], dt_1[31650:32310], dt_1[32310:33090], dt_1[33090:33870],
                            dt_1[33870:34559], dt_1[34559:35429], dt_1[35429:35849], dt_1[35849:36629],
                            dt_1[36629:37559], dt_1[37559:38249], dt_1[38249:38909], dt_1[38909:39749],
                            dt_1[39749:40259],
                            dt_1[40259:40949], dt_1[40949:41579], dt_1[41579:42359], dt_1[42359:42719],
                            dt_1[42719:43139], dt_1[43139:43619], dt_1[43619:44249], dt_1[44249:44699],
                            dt_1[44699:45119], dt_1[45119:45659], dt_1[45659:45869], dt_1[45869:47159],
                            dt_1[47159:47789], dt_1[47789:48509], dt_1[48509:49139], dt_1[49139:49679],
                            dt_1[49679:50369], dt_1[50369:51029],
                            dt_1[51029:51719], dt_1[51719:52349], dt_1[52349:53099], dt_1[53099:53549],
                            dt_1[53549:54029], dt_1[54029:54389], dt_1[54389:54989], dt_1[54989:55379],
                            dt_1[55379:55889], dt_1[55889:56399], dt_1[56399:56579], dt_1[56579:57719],
                            dt_1[57719:58349], dt_1[58349:59099], dt_1[59099:59699], dt_1[59699:60239],
                            dt_1[60239:60929], dt_1[60929:]]

        self.y = [10, 9, 0, 3, 1, 12, 2, 8, 7, 17, 16, 6, 5, 14, 15, 13, 11, 4,
                  10, 9, 0, 3, 1, 12, 2, 8, 7, 17, 16, 6, 5, 14, 15, 13, 11, 4,

                  12, 0, 1, 2, 15, 17, 9, 5, 14, 3, 8, 6, 10, 4, 11, 13, 7, 16,
                  12, 0, 1, 2, 15, 17, 9, 5, 14, 3, 8, 6, 10, 4, 11, 13, 7, 16,
                  1, 9, 16, 3, 17, 4, 12, 11, 10, 6, 0, 7, 15, 2, 13, 5, 14, 8,
                  1, 9, 16, 3, 17, 4, 12, 11, 10, 6, 0, 7, 15, 2, 13, 5, 14, 8,
                  3, 1, 6, 0, 14, 7, 8, 12, 17, 4, 13, 15, 9, 16, 10, 5, 11, 2,
                  3, 1, 6, 0, 14, 7, 8, 12, 17, 4, 13, 15, 9, 16, 10, 5, 11, 2,

                  3, 6, 2, 14, 4, 5, 17, 16, 9, 15, 11, 13, 8, 1, 10, 0, 12, 7,
                  3, 6, 2, 14, 4, 5, 17, 16, 9, 11, 13, 8, 1, 10, 0, 12, 7]
        self.e = [3, 17, 12, 4, 9, 0, 2, 14, 7, 11, 8, 1, 16, 6, 10, 13, 5, 15,
                  3, 17, 12, 4, 9, 0, 2, 14, 7, 11, 8, 1, 16, 6, 10, 13, 5, 15,

                  2, 9, 11, 1, 0, 3, 13, 6, 12, 10, 14, 17, 15, 4, 5, 7, 16, 8,
                  2, 9, 11, 1, 0, 3, 13, 5, 12, 10, 14, 17, 15, 4, 5, 7, 16, 8]

        self.t = [3, 2, 8, 5, 11, 17, 7, 15, 9, 0, 4, 1, 10, 16, 6, 12, 13,
                  3, 14, 2, 8, 5, 11, 17, 7, 15, 9, 0, 4, 1, 10, 16, 6, 12, 13,
                  9, 7, 13, 14, 6, 10, 17, 16, 11, 0, 15, 3, 12, 4, 2, 8, 1, 5,
                  9, 7, 13, 14, 6, 10, 17, 16, 11, 0, 3, 15, 12, 4, 2, 8, 1,
                  5, 16, 17, 13, 3, 7, 4, 6, 1, 9, 14, 0, 12, 10, 15, 2, 11, 8,
                  5, 16, 17, 13, 3, 7, 4, 6, 1, 9, 14, 0, 12, 10, 15, 2, 11, 8]

        self.total_len = len(self.sample_name)
        self.train_len = int(self.total_len * 0.8)

        if self.phase == 'train':
            self.data = self.sample_name
            self.label = self.y
        elif self.phase == 'eval':
            self.data = self.data_test_1
            self.label = self.t
        # if debug:
        #     self.sample_name = self.sample_name[:300]

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        label = self.label[idx]
        name = self.data[idx]

        data = np.zeros((3, self.T, self.V, self.M))
        skel_seq = name.reshape((-1, 12, 1, 2))
        frame_num = skel_seq.shape[0]
        for frame in range(frame_num):
            if frame >= self.T:
                break
            person_num = 1
            for person in range(person_num):

                joint_num = 12
                for joint in range(joint_num):
                    if joint < self.V and person < self.M:
                        data[0, frame, joint, person] = skel_seq[frame, joint, person, 0]
                        data[1, frame, joint, person] = skel_seq[frame, joint, person, 1]
                        data[2, frame, joint, person] = 0

        # (C, T, V, M) -> (I, C*2, T, V, M)
        data = multi_input(data, self.conn)

        return data, label, '_'

